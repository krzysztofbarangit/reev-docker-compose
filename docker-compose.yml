---

version: "3.9"

# == Re-useable Definitions ==================================================

# Default service definition for all (incl. postgres/redis/...)
x-service-default: &service_default
  env_file:
    - .env
  networks:
    - reev
  restart: unless-stopped

# Default service definition for internal services.
x-service-internal: &service_internal
  <<: *service_default
  volumes:
    - type: bind
      source: ${volumes_basedir:-./.dev/volumes}/reev-static/data
      target: /data
      read_only: true

# Default service definition for reev services.
#
# We provide the /data directory as read-only to all services as this
# simplifies the configuration considerably.
x-service-reev-default: &service_reev_default
  <<: *service_default
  image: "${image_base:-ghcr.io/bihealth}/${image_reev_name:-reev}:\
    ${image_reev_version:-main}"
  environment:
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=${POSTGRES_DB:-reev}
    - POSTGRES_USER=${POSTGRES_USER:-reev}
    - POSTGRES_HOST=${POSTGRES_HOST}
    - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    - PGADMIN_DEFAULT_EMAIL=${PGLADMIN_DEFAULT_EMAIL:-admin@example.com}
    - PGLADMIN_DEFAULT_PASSWORD=${PGLADMIN_DEFAULT_PASSWORD}
  depends_on:
    - annonars
    - cada-prio
    - dotty
    - mehari
    - nginx
    - rabbitmq
    - redis
    - viguno


# == Services ================================================================

services:
  # -- Traefik ----------------------------------------------------------------
  #
  # We use traefik as the reverse proxy for all public services.
  #
  # This file only contains the bare minimal configuraton.  We provide example
  # override files as `docker-compose.override.yml-traefik-{cert,le}` for
  # using custom certificates or letsencrypt.

  traefik:
    <<: *service_default
    container_name: traefik
    hostname: traefik
    image: ${image_traefik_name:-traefik}:${image_traefik_version:-2.10}
    # Expose the default HTTP and HTTPS ports.
    ports:
      - "80:80"
      - "443:443"
    command:
      # Enable Docker provider and disable "exposed by default".
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Define the "websecure" entrypoint with port 443.
      - "--entrypoints.websecure.address=:443"
      # Define the "web" entrypoint with port 80 and configure automated
      # permantent redirection from web to websecure (HTTP to HTTPS).
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.web.address=:80"
    volumes:
      # Mount Docker socket into container so traefik can react to events.
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  # -- nginx -----------------------------------------------------------------
  #
  # We serve static files such as browser tracks with nginx.

  nginx:
    <<: *service_default
    container_name: nginx
    hostname: nginx
    image: ${image_nginx_name:-nginx}:${image_nginx_version:-1}
    volumes:
      - type: bind
        source: ${volumes_basedir:-./.dev/volumes}/reev-static/data
        target: /data
        read_only: true
      - type: bind
        source: ${config_basedir:-./.dev/config}/nginx/nginx.conf
        target: /etc/nginx/nginx.conf

  # -- REEV ------------------------------------------------------------------
  #
  # REEV web server

  reev-backend:
    <<: *service_reev_default
    container_name: reev-backend
    hostname: reev-backend
    environment:
      FORWARDED_ALLOW_IPS: "*"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-reev}
      POSTGRES_USER: ${POSTGRES_USER:-reev}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    labels:
      # Default labels lines for reev.
      - "traefik.enable=true"
      - "traefik.http.middlewares.xforward.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.reev-backend.entrypoints=web,websecure"
      - "traefik.http.routers.reev-backend.middlewares=xforward"
      - "traefik.http.routers.reev-backend.rule=HostRegexp(`{catchall:.+}`)"
      - "traefik.http.services.reev-backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.reev-backend.tls=true"

  #
  # REEV celery worker

  reev-celery-worker:
    <<: *service_reev_default
    container_name: reev-celery-worker
    hostname: reev-celery-worker
    entrypoint:
      - /entrypoint-celery-worker.sh

  #
  # REEV celery beat

  reev-celery-beat:
    <<: *service_reev_default
    container_name: reev-celery-beat
    hostname: reev-celery-beat
    entrypoint:
      - /entrypoint-celery-beat.sh

  # -- Dotty -----------------------------------------------------------------
  #
  # Dotty provides translation from c./n./g. notation to SPDI.

  dotty:
    <<: *service_internal
    container_name: dotty
    hostname: dotty
    image: "${image_base:-ghcr.io/bihealth}/${image_dotty_name:-dotty}:\
      ${image_dotty_version:-latest}"
    environment:
      DATA_DIR: /data/dotty


  # -- Mehari ----------------------------------------------------------------
  #
  # Mehari provides the transcript-related information.

  mehari:
    <<: *service_internal
    container_name: mehari
    hostname: mehari
    image: "${image_base:-ghcr.io/varfish-org}/${image_mehari_name:-mehari}:\
      ${image_mehari_version:-latest}"

  # -- Viguno ----------------------------------------------------------------
  #
  # Viguno provides the disease/phenotype/gene relationships and related
  # information..

  viguno:
    <<: *service_internal
    container_name: viguno
    hostname: viguno
    image: "${image_base:-ghcr.io/varfish-org}/${image_viguno_name:-viguno}:\
      ${image_viguno_version:-latest}"

  # -- Annonars ---------------------------------------------------------------
  #
  # Annonars provides the variant information but also the gene information.

  annonars:
    <<: *service_internal
    container_name: annonars
    hostname: annonars
    image: "${image_base:-ghcr.io/varfish-org}/\
      ${image_annonars_name:-annonars}:${image_annonars_version:-latest}"

  # -- cada-prio --------------------------------------------------------------
  #
  # cada-prio provides phenotype-based prioritization

  cada-prio:
    <<: *service_internal
    container_name: cada-prio
    hostname: cada-prio
    image: "${image_base:-ghcr.io/bihealth}/${image_cada_prio_name:-cada-prio}:\
      ${image_cada_prio_version:-main}"

  # -- auto-acmg --------------------------------------------------------------
  #
  # auto-acmg provides automatic ACMG classification

  auto-acmg:
    <<: *service_internal
    container_name: auto-acmg
    hostname: auto-acmg
    image: "${image_base:-ghcr.io/bihealth}/${image_auto_acmg_name:-auto-acmg}:\
      ${image_auto_acmg_version:-main}"
    volumes:
      - type: bind
        source: ${volumes_basedir:-./.dev/volumes}/seqrepo/local
        target: /usr/local/share/seqrepo
      - type: bind
        source: ${volumes_basedir:-./.dev/volumes}/seqrepo/master
        target: /home/auto-acmg/seqrepo/master
    env_file:
      - .env

  # NOTE: PostgreSQL service removed - using external Dokploy database

  # -- redis -----------------------------------------------------------------
  #
  # We use the default configuration, but mount a volume for the data for
  # persistent storage.

  redis:
    <<: *service_internal
    container_name: redis
    hostname: redis
    image: ${image_redis_name:-redis}:${image_redis_version:-7}
    volumes:
      - type: bind
        source: ${volumes_basedir:-./.dev/volumes}/redis/data
        target: /data

  # -- rabbitmq --------------------------------------------------------------
  #
  # We use the default configuration, but mount a volume for the data for
  # persistent storage.

  rabbitmq:
    <<: *service_internal
    container_name: rabbitmq
    hostname: rabbitmq
    image: ${image_rabbitmq_name:-rabbitmq}:${image_rabbitmq_version:-3}
    volumes:
      - type: bind
        source: ${volumes_basedir:-./.dev/volumes}/rabbitmq/data
        target: /var/lib/rabbitmq

  # -- pgladmin ----------------------------------------------------------------
  #
  # Useful for interactive database administration.

  pgadmin:
    <<: *service_internal
    container_name: pgladmin
    hostname: pgladmin
    image: "${image_pgladmin_name:-dpage/pgladmin4}:\
      ${image_pgladmin_version:-latest}"
    environment:
      - PGLADMIN_DEFAULT_EMAIL=${PGLADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGLADMIN_DEFAULT_PASSWORD=${PGLADMIN_DEFAULT_PASSWORD}
    volumes:
      - type: bind
        source: ${volumes_basedir:-./.dev/volumes}/pgladmin/data
        target: /private/var/lib/pgladmin
      - type: bind
        source: ${config_basedir:-./.dev/config}/pgladmin/servers.json
        target: /pgladmin4/servers.json

  # -- flower -----------------------------------------------------------------
  #
  # Real-time celery monitoring.

  flower:
    <<: *service_internal
    container_name: flower
    hostname: flower
    image: ${image_flower_name:-mher/flower}:${image_flower_version:-latest}
    depends_on:
      - rabbitmq
    command:
      - "celery"
      - "--broker=amqp://guest@rabbitmq:5672//"
      - "flower"

# == Networks ================================================================

networks:
  # Explicitely configure the "reev" network so we can control its name.
  reev:
    driver_opts:
      com.docker.network.bridge.name: br-reev
